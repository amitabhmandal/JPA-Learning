-----------------------------------
UPDATE OPTION SPECIFIED WITH COLUMN
-----------------------------------

	use it along with the column annotation
	updatable= false
	
	boolean updatable() default true;
	
   /**
     * (Optional) Whether the column is included in SQL UPDATE 
     * statements generated by the persistence provider.
     */
     
    /**
     * (Optional) Whether the column is included in SQL INSERT 
     * statements generated by the persistence provider.
     */
-----------------------------------
INSERT OPTION SPECIFIED WITH COLUMN
-----------------------------------     
    use it along with column annotation 
    insertable=false
    
    boolean insertable() default true;

--------------------------------------
NULL OPTION SPECIFIED WITH COLUMN
______________________________________
    
    nullable = false
    by default it is true and that would allow the null check to be done underlying database
    which can be prevented by making nullable = false. then in this case the exception 
    shall be thrown by the ORM
    
    /**
     * (Optional) Whether the database column is nullable.
     */
    boolean nullable() default true;
    
--------------------------------------
@Basic Annotation
______________________________________
can be used to fetch type whether it needs to be lazily or eagerly loaded
Also it is used to specify whether the column can be null or not

By default column can be null hence optional = true is the value set
@Basic(optional = true) ie it is set to accept null 
however if the columns cannot be null then the annotation needed to be used is 
@Basic(optional = false)

ALso when @Basic annotation is used then Hibernate will not be used to 
generate schema with the constraint not null for the specific column type

@Basic(fetch = FetchType.EAGER) is the default for all columns
@Basic(fetch = FetchType.LAZILY) needs to be implied when the values needs to be lazily 
initialized
         